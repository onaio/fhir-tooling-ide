map "http://fhir.zeir.smartregister.org/fhir/StructureMap/13034953" = 'RecordChildImmunization'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group frocessChildImmunization(source src: QuestionnaireResponse, target bundle: Bundle) {
    src -> create('Encounter') as encounter then {
        src -> encounter.id = uuid(),
            encounter.status = "finished",
            encounter.type = cc("https://smartregister.org/", "immunization", "Immunization"),
            encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home"),
            encounter.priority = cc("http://terminology.hl7.org/ValueSet/v3-ActPriority", "EL", "Elective") as encounterPriority,
            encounterPriority.text = "Elective" "r_en_static";

        src -> encounter.subject = evaluate(src, $this.subject) "r_en_subject";

        src -> encounter.period = create("Period") as period then {
            src -> period.start = evaluate(src, now()) "r_en_period_start";
            src -> period.end = evaluate(src, now()) "r_en_period_end";
        } "r_en_period";

        src -> encounter.reasonCode = create('CodeableConcept') as reason then {
            src -> reason.coding = create("Coding") as coding then {
                src -> coding.system = "http://smartregister.org",
                    coding.display = 'Immunization',
                    coding.code = evaluate(src, $this.item.where(linkId = 'task-code').answer.value) "r_en_reason_code_coding";
            } "r_en_reason_code_coding";
            src -> reason.text = evaluate(src, $this.item.where(linkId = 'task-name').answer.value) "r_en_reason_code_text";
        } "r_en_reason_code";

        src -> encounter.participant = create("Encounter_Participant") as partComp then {
            src -> partComp.individual = create("Reference") as encOwner then {
                src -> encOwner.reference = evaluate(src, "Practitioner/" + $this.meta.tag.where($this.system = "https://smartregister.org/practitioner-tag-id").code) "r_en_participant_reference";
            } "r_en_participant_individual";
        } "r_en_participant";

        src then ExtractTaskStatus(src, bundle) "r_en_extract_encounter_location";
        src then ExtractEncounterLocation(src, encounter) "r_en_extract_encounter_location";
        src then ExtractVaccineNotGivenFlag(src, bundle, encounter) "r_en_extract_flag";

        src -> bundle.entry as entry, entry.resource = encounter,
            create("Immunization") as immunization
                then ExtractImmunization(src, encounter, immunization, bundle) "r_en_bundle_entry";
    } "r_en";
}

group ExtractEncounterLocation(source src: QuestionnaireResponse, target encounter: Encounter) {
    src.item as item where($this.linkId.where(contains('fd79b6b3-c269-4694-83fd-cd9e37170c26')).exists() and $this.answer.value.code = "static") then {
        src -> encounter.location = create('Encounter_Location') as loc then {
            src -> loc.location = create("Reference") as ref then {
                src -> ref.reference = "#001",
                    ref.display = "Static" "r_en_location_static_reference";
            } "r_en_location_static";
            src -> loc.status = "completed",
                loc.period = evaluate(encounter, $this.period) "r_en_location_static_status";
        } "r_en_location_static_component";
    } "r_en_location_static_check";

    src.item as item where($this.linkId.where(contains('fd79b6b3-c269-4694-83fd-cd9e37170c26')).exists() and $this.answer.value.code = "outreach") then {
        src -> encounter.location = create('Encounter_Location') as loc then {
            src -> loc.location = create("Reference") as ref then {
                src -> ref.reference = "#002",
                    ref.display = "Outreach" "r_en_location_outreach_reference";
            } "r_en_location_outreach";
            src -> loc.status = "completed",
                loc.period = evaluate(encounter, $this.period) "r_en_location_outreach_status";
        } "r_en_location_outreach_component";
    } "r_en_location_outreach_check";

    src.item as item where(linkId = "b00bda77-6df2-4660-8134-c424fb1dbf4f" and answer.value.exists()) then {
        src -> encounter.location = create('Encounter_Location') as loc then {
            src -> loc.location = evaluate(item, $this.answer.value) "r_en_loc_village_ref";
        } "r_en_loc_village_comp";
    } "r_en_loc_village";
}

group ExtractImmunization(source src: QuestionnaireResponse, source encounter: Encounter, target immunization: Immunization, target bundle: Bundle) {
    src.item where(linkId = '6c1c6d0e-7dd5-4665-9df1-343a9dc5e17f' and answer.value.code = 'yes') then {
        src -> immunization.id = uuid(),
            immunization.recorded = evaluate(src, now()),
            immunization.status = "completed",
            create('dateTime') as vaccineDate,
            vaccineDate.value = evaluate(src, $this.descendants().where(linkId='1e1f0f3b-58de-41b4-8db0-6c4b033cce57').answer.value.toString()),
            immunization.occurrence = vaccineDate,
            immunization.lotNumber = evaluate(src, $this.descendants().where(linkId='batch_number').answer.value),
            immunization.patient = evaluate(src, subject),
            immunization.encounter = reference(encounter) "r_imm_static";

        src -> immunization.vaccineCode = create('CodeableConcept') as vaccineCode then {
            src -> evaluate(src, $this.item.where(linkId = 'task-code').answer.value.toString()) as immunizationCode then {
                src -> vaccineCode.coding = c("http://smartregister.org", immunizationCode) as vaccineCodeCoding then {
                    src -> evaluate(src, $this.item.where(linkId = 'task-name').answer.value.toString()) as immunizationName then {
                        src -> vaccineCodeCoding.display = evaluate(src, $this.item.where(linkId = 'task-name').answer.value.toString()) "r_imm_vaccineCode_coding_display";
                        src -> vaccineCode.text = evaluate(src, $this.item.where(linkId = 'task-description').answer.value.toString()) "r_imm_vaccineCode_text";
                    } "r_imm_vaccineCode_imm_coding_code";
                } "r_imm_vaccineCode_imm_coding";
            } "r_imm_vaccineCode_imm";
        } "r_imm_vaccineCode";

        src.item as taskName where(linkId='task-name') then {
            src -> immunization.protocolApplied = create('Immunization_AppliedProtocol') as protocolApplied then {
                src -> evaluate(src, $this.item.where(linkId = 'task-description').answer.value.toString().lower()) as taskDesc then {
                    src.item as vaccineItems where(linkId = 'vaccine-dose-numbers') then {
                        vaccineItems.item as vaccine -> protocolApplied.doseNumber = evaluate(vaccine, src.item.descendants().where(linkId = taskDesc).answer.value) "r_imm_protocolapplied_dosenumber";
                    } "r_imm_protocolapplied_dose_group";
                } "r_imm_protocolapplied_dose_taskdesc";
            } "r_imm_protocolapplied";
        } "r_imm_protocolapplied_taskname";

        src then extractTaskOutput(src, encounter, immunization, bundle) "r_imm_extract_output";

        src -> bundle.entry as entry,
            entry.resource = immunization "r_bundle_entry_imm";
    } "r_imm";
}

group extractTaskOutput(source src: QuestionnaireResponse, source encounter: Encounter, source immunization: Immunization, target bundle: Bundle) {
    src -> bundle.entry as entry, entry.resource = create('Task') as task then {
        src -> task.id = create('id') as id then {
            src -> id.value = evaluate(src, $this.item.where(linkId = 'logical-task-id').answer.value.toString()) "r_task_id";
        } "r_task_get_existing";

        src -> task.status = 'completed' "r_task_status";

        // // Task Encounter Output one
        // src -> task.output = create('Task_Output') as outputTask then {
        //     src -> outputTask.type = create("CodeableConcept") as concept then {
        //         src-> concept.coding = c("http://smartregister.org", "41000179103") as coding then {
        //             src -> coding.display = "Immunization record (record artifact)" "r_task_output_1_type_coding_display";
        //         } "r_task_output_1_type_coding";
        //     } "r_task_output_1_type";
        //     src -> outputTask.value = reference(encounterPartOf) "r_task_output_1_type_value";
        // } "r_task_output_1";

        // Task Encounter Output two
        src -> task.output = create('Task_Output') as outputTask then {
            src -> outputTask.type = create("CodeableConcept") as concept then {
                src-> concept.coding = c("http://smartregister.org", "41000179103") as coding then {
                    src -> coding.display = "Immunization record (record artifact)" "r_task_output_2_type_coding_display";
                } "r_task_output_2_type_coding";
            } "r_task_output_2_type";
            src -> outputTask.value = reference(encounter) "r_task_output_2_type_value";
        } "r_task_output_2";

        // Task Immunization Output
        src -> task.output = create('Task_Output') as outputTask then {
            src -> outputTask.type = create("CodeableConcept") as concept then {
                src-> concept.coding = c("http://smartregister.org", "41000179103") as coding then {
                    src -> coding.display = "Immunization record (record artifact)" "r_task_output_3_type_coding_display";
                } "r_task_output_3_type_coding";
            } "r_task_output_3_type";
            src -> outputTask.value = reference(immunization) "r_task_output_3_type_value";
        } "r_task_output_3";

        // Task Immunization Output
        src -> task.output = create('Task_Output') as outputTask then {
            src -> outputTask.type = create("CodeableConcept") as concept then {
                src-> concept.coding = c("http://smartregister.org", "35123003") as coding then {
                    src -> coding.display = "Immunization record (record artifact)" "r_task_output_4_type_coding_display";
                } "r_task_output_4_type_coding";
            } "r_task_output_4_type";

            src -> create('dateTime') as vaccineDate,
                vaccineDate.value = evaluate(src, $this.descendants().where(linkId='1e1f0f3b-58de-41b4-8db0-6c4b033cce57').answer.value.toString()),
                outputTask.value = vaccineDate "r_task_output_4_vaccine_date";
        } "r_task_output_4";
    } "r_task";
}

group ExtractTaskStatus(source src: QuestionnaireResponse, target bundle: Bundle) {
    src.item where(linkId = '6c1c6d0e-7dd5-4665-9df1-343a9dc5e17f' and answer.value.exists() and answer.value.code = "no") then {
        src -> bundle.entry as entry, entry.resource = create('Task') as task then {
            src -> task.id = create('id') as id then {
                src -> id.value = evaluate(src, $this.item.where(linkId = 'logical-task-id').answer.value.toString()) "r_task_status_get_existing";
            } "r_task_status_id";

            src -> task.status = 'failed' "r_task_status";
        } "r_task";
    } "r_task_vaccine_not_given";
}

group ExtractVaccineNotGivenFlag(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item where(linkId = '6c1c6d0e-7dd5-4665-9df1-343a9dc5e17f' and answer.value.exists() and answer.value.code = 'no') then {
        src -> bundle.entry as entry, entry.resource = create('Flag') as flag then {
        src -> flag.id = uuid(),
            flag.subject = evaluate(src, $this.subject) "r_flag_static";

        src -> flag.code = create('CodeableConcept') as concept then {
            src -> concept.coding = create('Coding') as coding then {
                src -> coding.system = "https://smartregister.org/" "r_flag_code_coding_system";
                src -> coding.code = evaluate(src, 'Task/' + $this.item.where(linkId = 'logical-task-id').answer.value) "r_flag_code_coding_code";
                src -> coding.display = evaluate(src, 'Vaccine_not_given_' + $this.item.where(linkId = '694be520-22b8-4c6c-8792-7e326294059c').answer.value.code) "r_flag_code_coding_display";
            } "r_flag_code_coding";
            src -> concept.text = "Vaccine Not Administered" "r_flag_code_text";
        } "r_flag_code";

        src -> flag.period = create("Period") as period then {
            src -> period.start = evaluate(src, now()) "r_flag_period_start";
            src -> period.end = evaluate(src, now()) "r_flag_period_end";
        } "r_flag_period";

        src -> flag.encounter = reference(encounter) "r_flag_encounter";
    } "r_flag";
  } "r_flag_vaccine_not_given";
}